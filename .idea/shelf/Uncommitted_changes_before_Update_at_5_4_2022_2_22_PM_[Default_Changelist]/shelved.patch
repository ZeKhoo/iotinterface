Index: app/src/main/java/com/example/iotinterface/create/createActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.iotinterface.create\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Gravity\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.iotinterface.R\r\nimport com.example.iotinterface.databinding.ActivityCreateBinding\r\nimport com.google.firebase.database.DatabaseReference\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass createActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityCreateBinding\r\n    private lateinit var widgetRecyclerView: RecyclerView\r\n    private lateinit var wgtArrayList: ArrayList<Attr>\r\n    private lateinit var buttonsList: ArrayList<Button>\r\n\r\n    //Firebase Reference\r\n    private lateinit var dbRef: DatabaseReference\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityCreateBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n//        //Declare arrayList Attr\r\n//        widgetRecyclerView = binding.container\r\n//        widgetRecyclerView.layoutManager = LinearLayoutManager(this)\r\n//        widgetRecyclerView.setHasFixedSize(true)\r\n//\r\n//        widgetRecyclerView.addItemDecoration(\r\n//            DividerItemDecoration(\r\n//                binding.container.getContext(),\r\n//                DividerItemDecoration.VERTICAL\r\n//            )\r\n//        )\r\n\r\n        Log.d(\"Test1\", \"a\")\r\n        wgtArrayList = arrayListOf<Attr>()\r\n        wgtArrayList.add(Attr(\"Aircon\", 200, 300, \"On\", \"button\"))\r\n        wgtArrayList.add(Attr(\"Fan\", 200, 300, \"Off\", \"toggleButton\"))\r\n        wgtArrayList.add(Attr(\"Aircon\", 200, 300, \"On\", \"button\"))\r\n        wgtArrayList.add(Attr(\"Fan\", 200, 300, \"On\", \"toggleButton\"))\r\n\r\n\r\n        Log.d(\"Test1\", \"b\")\r\n        for (i in 0 until wgtArrayList.size){\r\n//            var name:String = wgtAttrList[i].name\r\n//            var height:Int = wgtAttrList[i].height\r\n//            var width:Int = wgtAttrList[i].width\r\n//            var value: String = wgtAttrList[i].value\r\n\r\n            Log.d(\"Test1\", \"c\")\r\n            when (wgtArrayList[i].widgetType){\r\n                \"button\" -> addButton(wgtArrayList[i], i)\r\n                \"toggleButton\" -> addToggleButton(wgtArrayList[i], i)\r\n//                \"radioButton\" -> addRadioButton(wgtArrayList[i], i)\r\n\r\n            }\r\n        }\r\n\r\n//        Log.d(\"Test1\", \"d\")\r\n//        val adapter = createAdapter(wgtArrayList)\r\n//        widgetRecyclerView.adapter = adapter\r\n\r\n//        adapter.setOnItemClickListener(onject:)\r\n\r\n        //Write Firebase\r\n//        for (i in 0 until wgtArrayList.size) {\r\n//            writeNewUser(wgtArrayList[i], i)\r\n//        }\r\n\r\n//        val container: LinearLayout = findViewById(R.id.container)\r\n\r\n//        val keypad = findViewById<View>(R.id.keypad) as TableLayout\r\n//        keypad.visibility = View.GONE\r\n\r\n//        fun onClick(arg0: View){\r\n//            val layoutInflater = baseContext.getSystemService() as LayoutInflater\r\n//        }\r\n\r\n\r\n//        val llTestMenuMain = findViewById<LinearLayout>(R.id.llTestMenuMain)\r\n//\r\n//        //Create Recycle View dynamically in Linear Layout\r\n//        val rv = RecyclerView(this)\r\n//        val params = RecyclerView.LayoutParams(\r\n//            RecyclerView.LayoutParams.MATCH_PARENT,\r\n//            RecyclerView.LayoutParams.WRAP_CONTENT\r\n//        )\r\n//        rv.layoutParams = params\r\n//\r\n//        //Create Linear Layout in Recycler View\r\n//        val llm = LinearLayoutManager(this)\r\n//        adapter = RVAdapter_ButtonList(tests, null, this, buttonFontSize)\r\n//        rv.adapter = adapter\r\n//        rv.layoutManager = llm\r\n//        rv.visibility = View.VISIBLE\r\n\r\n        //Create Button based on arrayList\r\n//        Create List of Button\r\n\r\n    }\r\n\r\n\r\n\r\n    private fun writeNewUser(arr: Attr, i: Int) {\r\n        val format1 = SimpleDateFormat(\"yyyyMM\")\r\n        val child1 = format1.format(Date())\r\n\r\n        val format2 = SimpleDateFormat(\"dd\")\r\n        val child2 = format2.format(Date())\r\n\r\n        dbRef.child(arr.name).child(\"Status\")\r\n\r\n    }\r\n\r\n\r\n    private fun addToggleButton(attr: Attr, position: Int) {\r\n//        addTextView(attr.name, attr.widgetType)\r\n\r\n        // Create ToggleButton programmatically.\r\n        val toggleButton = ToggleButton(this)\r\n        toggleButton.layoutParams = LinearLayout.LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n        toggleButton.gravity = Gravity.CENTER\r\n        toggleButton.isChecked = attr.status == \"On\"\r\n\r\n        toggleButton.textOn = \"ON\"\r\n        toggleButton.textOff = \"OFF\"\r\n\r\n        // Add ToggleButton to LinearLayout\r\n\r\n//        binding.rootLayout.addView(toggleButton)\r\n//\r\n//        toggleButton.setOnCheckedChangeListener { buttonView, isChecked ->\r\n//            if (isChecked) {\r\n//                Toast.makeText(this, \"On\", Toast.LENGTH_LONG).show()\r\n//            }\r\n//            else{\r\n//                Toast.makeText(this, \"Off\", Toast.LENGTH_LONG).show()\r\n//            }\r\n//        }\r\n\r\n    }\r\n\r\n    private fun addTextView(name: String, widgetType: String) {\r\n        // creating TextView programmatically\r\n        val tv_dynamic = TextView(this)\r\n        tv_dynamic.textSize = 20f\r\n//        tv_dynamic.text = name + \"(\" +\r\n\r\n        // add TextView to LinearLayout\r\n//        binding.rootLayout.addView(tv_dynamic)\r\n    }\r\n\r\n    private fun addButton(arr: Attr, position: Int){\r\n        Log.d(\"Test1\", \"e\")\r\n        // Create Button programmatically.\r\n        val button = Button(this)\r\n\r\n        Log.d(\"Test1\", \"i\")\r\n        //Set Width and Height of Button (width, height)\r\n        button.layoutParams = LinearLayout.LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n        Log.d(\"Test1\", \"j\")\r\n        (button.layoutParams as LinearLayout.LayoutParams).setMargins(10, 50, 10, 50)\r\n        button.gravity = Gravity.CENTER\r\n        button.text = arr.name\r\n        button.isAllCaps = true\r\n\r\n//        //Set Button ID (Int)\r\n//        button.id = R.id.TEXT_ID\r\n\r\n        Log.d(\"Test1\", \"k\")\r\n//        //add button in arraylist\r\n//        buttonsList.add(button)\r\n//\r\n//        Log.d(\"Test1\", \"f\")\r\n//        // Add Button to LinearLayout\r\n//        binding.rootLayout.addView(button)\r\n\r\n        Log.d(\"Test1\", \"g\")\r\n        //SetOnClickListener\r\n        button.setOnClickListener{\r\n            Toast.makeText(this, \"a\"+position, Toast.LENGTH_LONG).show()\r\n        }\r\n        Log.d(\"Test1\", \"h\")\r\n\r\n//        val layout = findViewById<View>(R.id.rootLayout) as LinearLayout\r\n//        layout.addView(button)\r\n\r\n//        //Set Padding of Button\r\n//        val padding = resources.getDimension(R.dimen.text_padding).toInt()\r\n//        button.setPadding(padding, padding, padding, padding)\r\n//\r\n//        //Set Margin of Button\r\n//        val margin = resources.getDimension(R.dimen.text_margin).toInt()\r\n//        val layoutParams = LinearLayout.LayoutParams(\r\n//            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n//            ViewGroup.LayoutParams.WRAP_CONTENT\r\n//        )\r\n//        layoutParams.setMargins(margin, margin, margin, margin)\r\n//        button.layoutParams = layoutParams\r\n//\r\n//        //Set Background of Button\r\n//        val color = ContextCompat.getColor(this, R.color.purple_200)\r\n//        button.setBackgroundColor(color)\r\n//\r\n//        //Set Visibility\r\n//        button.visibility = View.VISIBLE\r\n//\r\n//        //Set Text of Button\r\n//        button.text = getString(R.string.click_on_me)\r\n//\r\n//        //Set Color Text of Button\r\n//        val textColor = ContextCompat.getColor(this, R.color.black)\r\n//        button.setTextColor(textColor)\r\n//\r\n//        //Set Gravity of Button == (Align)\r\n//        button.gravity = Gravity.CENTER\r\n//\r\n//        //Set Text in Uppercase or Lowercase\r\n//        button.text = \"Hello Tutorialwing\"\r\n//        button.isAllCaps = true //HELLO TUTORIALWING\r\n//        button.isAllCaps = false //Hello Tutorialwing\r\n//\r\n//        //Set Size of Text in Button\r\n//        button.textSize = resources.getDimension(R.dimen.text_margin)\r\n//\r\n//        //Set Style (Bold/italic) of Text in Button\r\n//        button.typeface = Typeface.DEFAULT_BOLD;\r\n//\r\n//        //Set Letter Spacing of Text in Button\r\n//        button.letterSpacing = resources.getDimension(R.dimen.text_letter_spacing)\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/iotinterface/create/createActivity.kt b/app/src/main/java/com/example/iotinterface/create/createActivity.kt
--- a/app/src/main/java/com/example/iotinterface/create/createActivity.kt	(revision cb081fb524cbf24647cd1ea7cbc7e011bc37235e)
+++ b/app/src/main/java/com/example/iotinterface/create/createActivity.kt	(date 1649139686499)
@@ -139,15 +139,15 @@
         // Add ToggleButton to LinearLayout
 
 //        binding.rootLayout.addView(toggleButton)
-//
-//        toggleButton.setOnCheckedChangeListener { buttonView, isChecked ->
-//            if (isChecked) {
-//                Toast.makeText(this, "On", Toast.LENGTH_LONG).show()
-//            }
-//            else{
-//                Toast.makeText(this, "Off", Toast.LENGTH_LONG).show()
-//            }
-//        }
+
+        toggleButton.setOnCheckedChangeListener { buttonView, isChecked ->
+            if (isChecked) {
+                Toast.makeText(this, "On", Toast.LENGTH_LONG).show()
+            }
+            else{
+                Toast.makeText(this, "Off", Toast.LENGTH_LONG).show()
+            }
+        }
 
     }
 
@@ -157,9 +157,9 @@
         tv_dynamic.textSize = 20f
 //        tv_dynamic.text = name + "(" +
 
-        // add TextView to LinearLayout
+         //add TextView to LinearLayout
 //        binding.rootLayout.addView(tv_dynamic)
-    }
+//    }
 
     private fun addButton(arr: Attr, position: Int){
         Log.d("Test1", "e")
