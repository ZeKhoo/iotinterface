Index: app/src/main/java/com/example/iotinterface/create/airconActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.iotinterface.create\r\n\r\nimport android.graphics.Color\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.text.Html\r\nimport android.util.Log\r\nimport android.view.Gravity\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.iotinterface.R\r\nimport com.example.iotinterface.create.widgetAttr.*\r\nimport com.example.iotinterface.databinding.ActivityCreateBinding\r\nimport com.google.firebase.database.DatabaseReference\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\nimport org.w3c.dom.Text\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass createActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityCreateBinding\r\n    private lateinit var widgetRecyclerView: RecyclerView\r\n    private lateinit var wgtArrayList: ArrayList<Any>\r\n//    private lateinit var buttonsList: ArrayList<View>\r\n    private lateinit var radioBtnList: ArrayList<RadioButton>\r\n    private var SHORT_DELAY: Int = 1000\r\n\r\n    private var lcdfan: String = \"1\"\r\n    private var lcdled: String = \"red\"\r\n    private var lcdmode: String = \"Fan\"\r\n    private var lcdTemperature: String = \"20\"\r\n\r\n    //Firebase Reference\r\n    private lateinit var dbRef: DatabaseReference\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityCreateBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        //Declare arrayList Attr\r\n//        widgetRecyclerView = binding.container\r\n//        widgetRecyclerView.layoutManager = LinearLayoutManager(this)\r\n//        widgetRecyclerView.setHasFixedSize(true)\r\n\r\n//        widgetRecyclerView.addItemDecoration(\r\n//            DividerItemDecoration(\r\n//                binding.container.getContext(),\r\n//                DividerItemDecoration.VERTICAL\r\n//            )\r\n//        )\r\n\r\n        //Set Text\r\n        binding.textViewTtile.text = \"Aircon\"\r\n\r\n        wgtArrayList = arrayListOf<Any>()\r\n        val ledList = arrayOf(\"red\", \"blue\", \"green\")\r\n        val modelist = arrayOf(\"Fan\", \"Cool\", \"Sleep\")\r\n\r\n        wgtArrayList.add(toggleBtnAttr(\"switch \", \"1\", \"green\"))\r\n        wgtArrayList.add(seekBarAttr(\"fan_speed\", 0, 4, \"1\"))\r\n        wgtArrayList.add(spinnerAttr(\"led\", \"red\", ledList))\r\n        wgtArrayList.add(radioBtnAttr(\"mode\", 3, \"Fan\", \"green\", modelist))\r\n        wgtArrayList.add(seekBarAttr(\"temperature\", 16, 30, \"20\"))\r\n\r\n//        var displayStatus:String = \"Fan speed = \"+\"<b>\"+lcdfan+\"</b>\"+\"\\nLed Color = \"+\"<b>\"+lcdled+\"</b>\"+\"\\nMode = \"+\"<b>\"+lcdmode+\"</b>\"+\"Temperatuew = \"+\"<b>\"+lcdTemperature+\"</b>\"\r\n        var displayStatus:String = \"Fan speed = \"+lcdfan+\"\\nLed Color = \"+lcdled+\"\\nMode = \"+lcdmode+\"\\nTemperature = \"+lcdTemperature\r\n        binding.textViewStatus.setText(displayStatus)\r\n\r\n        for (i in 0 until wgtArrayList.size){\r\n            var className = wgtArrayList[i].javaClass.kotlin.java.simpleName.toString()\r\n            when(className){\r\n                \"btnAttr\" -> addButton(wgtArrayList[i] as btnAttr, i)\r\n                \"toggleBtnAttr\" -> addToggleButton(wgtArrayList[i] as toggleBtnAttr, i)\r\n                \"spinnerAttr\" -> addSpinner(wgtArrayList[i] as spinnerAttr, i)\r\n                \"radioBtnAttr\" -> addRadioButton(wgtArrayList[i] as radioBtnAttr, i)\r\n                \"seekBarAttr\" -> addSeekBar(wgtArrayList[i] as seekBarAttr, i)\r\n            }\r\n        }\r\n\r\n        binding.buttonReset.setOnClickListener(){\r\n            val ll: LinearLayout = findViewById(R.id.container)\r\n            ll.removeAllViews()\r\n\r\n            for (i in 0 until wgtArrayList.size){\r\n                var className = wgtArrayList[i].javaClass.kotlin.java.simpleName.toString()\r\n                when(className){\r\n                    \"btnAttr\" -> addButton(wgtArrayList[i] as btnAttr, i)\r\n                    \"toggleBtnAttr\" -> addToggleButton(wgtArrayList[i] as toggleBtnAttr, i)\r\n                    \"spinnerAttr\" -> addSpinner(wgtArrayList[i] as spinnerAttr, i)\r\n                    \"radioBtnAttr\" -> addRadioButton(wgtArrayList[i] as radioBtnAttr, i)\r\n                    \"seekBarAttr\" -> addSeekBar(wgtArrayList[i] as seekBarAttr, i)\r\n                }\r\n            }\r\n        }\r\n\r\n        binding.buttonConfirm.setOnClickListener(){\r\n\r\n            Log.d(\"Create\", lcdled)\r\n            Log.d(\"Create\", lcdmode)\r\n\r\n            var updateStatus:String = \"Fan speed = \"+lcdfan+\"\\nLed Color = \"+lcdled+\"\\nMode = \"+lcdmode+\"\\nTemperature = \"+lcdTemperature\r\n            binding.textViewStatus.setText(updateStatus)\r\n\r\n            Toast.makeText(this@createActivity,\r\n                \"Updated\",\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n        }\r\n\r\n        dbRef = Firebase.database.reference\r\n\r\n    }\r\n\r\n    private fun writeNewUser(arr: btnAttr, i: Int) {\r\n        val format1 = SimpleDateFormat(\"yyyyMM\")\r\n        val child1 = format1.format(Date())\r\n\r\n        val format2 = SimpleDateFormat(\"dd\")\r\n        val child2 = format2.format(Date())\r\n\r\n        dbRef.child(arr.name).child(\"Status\")\r\n\r\n    }\r\n\r\n\r\n    private fun addTextView(name: String, widgetType: String, status: String) : TextView {\r\n        // creating TextView programmatically\r\n        val txt = TextView(this)\r\n        txt.textSize = 20f\r\n        txt.gravity = Gravity.CENTER\r\n        val nameUpper = name.toUpperCase()\r\n        txt.text = \"$nameUpper($widgetType): $status\"\r\n\r\n        txt.gravity = Gravity.LEFT\r\n        //add TextView to LinearLayout\r\n        binding.container.addView(txt)\r\n\r\n        return txt\r\n    }\r\n\r\n    private fun addToggleButton(btnAttr: toggleBtnAttr, position: Int) {\r\n        val txtBox: TextView = addTextView(btnAttr.name, btnAttr.WIDGET_TYPE, btnAttr.status)\r\n\r\n        // Create ToggleButton programmatically.\r\n        val toggleButton = ToggleButton(this)\r\n        toggleButton.layoutParams = LinearLayout.LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n        toggleButton.gravity = Gravity.CENTER\r\n        toggleButton.isChecked = btnAttr.status.toString() == \"1\"\r\n\r\n        toggleButton.textOn = \"ON\"\r\n        toggleButton.textOff = \"OFF\"\r\n//        if (btnAttr.color == \"red\")\r\n//            toggleButton.setBackgroundColor(R.drawable.button_red)\r\n//        else if (btnAttr.color == \"blue\")\r\n//            toggleButton.setBackgroundColor(R.drawable.button_blue)\r\n//        else if (btnAttr.color == \"green\")\r\n//            toggleButton.setBackgroundColor(R.drawable.button_green)\r\n\r\n        // Add ToggleButton to LinearLayout\r\n        binding.container.addView(toggleButton)\r\n\r\n        toggleButton.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            if (isChecked) {\r\n                txtBox.text = btnAttr.name.toUpperCase()+\"(\"+btnAttr.WIDGET_TYPE+\"): 1\"\r\n            }\r\n            else{\r\n                txtBox.text = btnAttr.name.toUpperCase()+\"(\"+btnAttr.WIDGET_TYPE+\"): 0\"\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun addButton(attr: btnAttr, position: Int){\r\n        val txtBox: TextView = addTextView(attr.name, attr.WIDGET_TYPE, attr.status)\r\n\r\n        // Create Button programmatically.\r\n        val button = Button(this)\r\n\r\n        //Set Width and Height of Button (width, height)\r\n        button.layoutParams = LinearLayout.LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n        (button.layoutParams as LinearLayout.LayoutParams).setMargins(10, 50, 10, 50)\r\n        button.gravity = Gravity.CENTER\r\n        button.text = attr.name\r\n        button.isAllCaps = true\r\n\r\n//        //Set Button ID (Int)\r\n//        button.id = R.id.TEXT_ID\r\n\r\n        //add button in arraylist\r\n//        buttonsList.add(button)\r\n\r\n        // Add Button to LinearLayout\r\n        binding.container.addView(button)\r\n\r\n    }\r\n\r\n    private fun addSpinner(attr: spinnerAttr, position: Int) {\r\n        val txtBox: TextView = addTextView(attr.name, attr.WIDGET_TYPE, attr.status)\r\n\r\n        lcdled = attr.status\r\n\r\n        val spinner = Spinner(this)\r\n        spinner.layoutParams = LinearLayout.LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n\r\n        val arrayAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, attr.list)\r\n        spinner.adapter = arrayAdapter\r\n\r\n        spinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\r\n            override fun onItemSelected(\r\n                parent: AdapterView<*>,\r\n                view: View,\r\n                position: Int,\r\n                id: Long\r\n            ) {\r\n                Toast.makeText(\r\n                    this@createActivity,\r\n                    attr.name + \": \" + attr.list[position],\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n\r\n                txtBox.text = attr.name.toUpperCase()+\"(\"+attr.WIDGET_TYPE+\") : \"+attr.list[position]\r\n                lcdled = attr.list[position]\r\n            }\r\n\r\n            override fun onNothingSelected(parent: AdapterView<*>) {\r\n                // Code to perform some action when nothing is selected\r\n            }\r\n        }\r\n\r\n        // Add Spinner to LinearLayout\r\n        binding.container.addView(spinner)\r\n    }\r\n\r\n    // Create RadioButton Dynamically\r\n    private fun addRadioButton(attr: radioBtnAttr, position: Int) {\r\n        val txtBox: TextView = addTextView(attr.name, attr.WIDGET_TYPE, attr.status)\r\n\r\n        lcdmode = attr.status\r\n\r\n        Log.d(\"Spinner\", attr.name)\r\n        Log.d(\"Spinner\", attr.amount.toString())\r\n\r\n        for (i in 0 until attr.amount){\r\n            Log.d(\"Spinner\", i.toString())\r\n            val button = Button(this)\r\n\r\n            Log.d(\"Spinner\", \"a\")\r\n            //Set Width and Height of Button (width, height)\r\n            button.layoutParams = LinearLayout.LayoutParams(\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT\r\n            )\r\n            Log.d(\"Spinner\", \"b\")\r\n            button.gravity = Gravity.CENTER_HORIZONTAL\r\n            Log.d(\"Spinner\", \"c\")\r\n            button.text = attr.list[i]\r\n            button.isAllCaps = true\r\n//            if (attr.color == \"red\")\r\n//                button.setBackgroundColor(R.drawable.button_red)\r\n//            else if (attr.color == \"blue\")\r\n//                button.setBackgroundColor(R.drawable.button_blue)\r\n//            else if (attr.color == \"green\")\r\n//                button.setBackgroundColor(R.drawable.button_green)\r\n\r\n            Log.d(\"Spinner\", \"success\")\r\n\r\n            button.setOnClickListener(){\r\n                txtBox.text = attr.name.toUpperCase()+\"(\"+attr.WIDGET_TYPE+\") : \"+attr.list[i]\r\n                lcdmode = attr.list[i].toString()\r\n            }\r\n\r\n            // Add Spinner to LinearLayout\r\n            binding.container.addView(button)\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun addSeekBar(attr: seekBarAttr, i: Int) {\r\n        val txtBox: TextView = addTextView(attr.name, attr.WIDGET_TYPE, attr.status)\r\n\r\n        var value: Int = attr.status.toInt()\r\n\r\n        //pass current value\r\n        if (attr.name == \"fan_speed\"){\r\n            lcdfan = value.toString()\r\n        }else if (attr.name == \"temperature\")\r\n            lcdTemperature = value.toString()\r\n\r\n        val seekBar = SeekBar(this)\r\n        val layoutParams = LinearLayout.LayoutParams(\r\n            ViewGroup.LayoutParams.MATCH_PARENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n        layoutParams.setMargins(30, 30, 30, 30)\r\n        var min: Int = attr.min\r\n        var max: Int = attr.max\r\n        seekBar.min = min\r\n        seekBar.max = max\r\n        seekBar.progress = value\r\n\r\n        seekBar.layoutParams = layoutParams\r\n\r\n        // Add SeekBar to LinearLayout\r\n        binding.container.addView(seekBar)\r\n\r\n        seekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n            override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n                seekBar.setProgress(progress)\r\n                txtBox.text = attr.name.toUpperCase()+\"(\"+attr.WIDGET_TYPE+\") : \"+progress\r\n                value = progress\r\n            }\r\n\r\n            override fun onStartTrackingTouch(seekBar: SeekBar) {\r\n                // Write code to perform some action when touch is started.\r\n            }\r\n\r\n            override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n                if (attr.name == \"fan_speed\"){\r\n                    lcdfan = value.toString()\r\n                }else if (attr.name == \"temperature\")\r\n                    lcdTemperature = value.toString()\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/iotinterface/create/airconActivity.kt b/app/src/main/java/com/example/iotinterface/create/airconActivity.kt
--- a/app/src/main/java/com/example/iotinterface/create/airconActivity.kt	(revision 69624b4390193e233d6a56a1e2a21e425949d6c7)
+++ b/app/src/main/java/com/example/iotinterface/create/airconActivity.kt	(date 1649160174452)
@@ -1,9 +1,8 @@
 package com.example.iotinterface.create
 
-import android.graphics.Color
+
 import android.os.Build
 import android.os.Bundle
-import android.text.Html
 import android.util.Log
 import android.view.Gravity
 import android.view.View
@@ -18,7 +17,6 @@
 import com.google.firebase.database.DatabaseReference
 import com.google.firebase.database.ktx.database
 import com.google.firebase.ktx.Firebase
-import org.w3c.dom.Text
 import java.text.SimpleDateFormat
 import java.util.*
 
@@ -27,7 +25,7 @@
     private lateinit var binding: ActivityCreateBinding
     private lateinit var widgetRecyclerView: RecyclerView
     private lateinit var wgtArrayList: ArrayList<Any>
-//    private lateinit var buttonsList: ArrayList<View>
+    //    private lateinit var buttonsList: ArrayList<View>
     private lateinit var radioBtnList: ArrayList<RadioButton>
     private var SHORT_DELAY: Int = 1000
 
@@ -339,5 +337,4 @@
             }
         })
     }
-}
-
+}
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:7.1.2'\r\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20\"\r\n        classpath 'com.google.gms:google-services:4.3.10'\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 69624b4390193e233d6a56a1e2a21e425949d6c7)
+++ b/build.gradle	(date 1649159958427)
@@ -6,7 +6,7 @@
     }
     dependencies {
         classpath 'com.android.tools.build:gradle:7.1.2'
-        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20"
+        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.30'
         classpath 'com.google.gms:google-services:4.3.10'
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
Index: app/src/main/res/layout/activity_aircon.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_aircon.xml b/app/src/main/res/layout/activity_aircon.xml
new file mode 100644
--- /dev/null	(date 1649160174466)
+++ b/app/src/main/res/layout/activity_aircon.xml	(date 1649160174466)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".create.airconActivity">
+
+  </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
